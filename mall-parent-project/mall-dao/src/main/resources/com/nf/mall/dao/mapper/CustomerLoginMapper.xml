<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nf.mall.dao.port.CustomerLoginDao">
    <sql id="customerLoginParams">
        login_account, login_name, login_password, activate_code, creation_time
    </sql>

    <select id="getAll" resultType="com.nf.mall.entity.CustomerLoginEntity">
        select
        customer_id, <include refid="customerLoginParams"/>, user_stats
        from customer_login
    </select>

    <select id="getPageAll" resultType="com.nf.mall.entity.CustomerLoginEntity">
        select
        customer_id, <include refid="customerLoginParams"/>, user_stats
        from customer_login order by customer_id
    </select>

    <select id="getById" resultType="com.nf.mall.entity.CustomerLoginEntity">
        select
        customer_id, <include refid="customerLoginParams"/>, user_stats
        from customer_login
        where customer_id = #{id}
    </select>

    <select id="getPageSearch" resultType="com.nf.mall.entity.CustomerLoginEntity">
        select
        customer_id, <include refid="customerLoginParams"/>, user_stats
        from customer_login
        <where>
            <choose>
                <when test="loginName == ''">
                    creation_time BETWEEN #{startTime} AND #{endTime}
                </when>
                <when test="startTime == '' || endTime == ''">
                    login_name like '%' #{loginName} '%'
                </when>
                <otherwise>
                    creation_time BETWEEN #{startTime} AND #{endTime} and login_name like '%' #{loginName} '%'
                </otherwise>
            </choose>
        </where>
         order by customer_id
    </select>

    <select id="getCount" resultType="integer">
        select count(*) from customer_login
    </select>
    <select id="verifyAndById" resultType="Integer">
        select
            customer_id
        from customer_login where login_account = #{loginAccount} and login_password = #{loginPassword}
    </select>
    <!--
        下面是注册的相关语句
        LAST_INSERT_ID() ： 获取到当前事务中最后添加数据的id
    -->
    <insert id="register">
        insert into
            customer_login(<include refid="customerLoginParams"/>)
        values(#{loginEntity.loginAccount},#{loginEntity.loginName},#{loginEntity.loginPassword},#{loginEntity.activateCode},#{loginEntity.creationTime})
        ;
        insert into
            customer_inf(customer_id, customer_phone, customer_email)
        values(LAST_INSERT_ID(), #{infEntity.customerPhone},#{infEntity.customerEmail})
    </insert>

    <delete id="delete">
        delete from customer_login where customer_id = #{id}
    </delete>

    <delete id="batchDelete">
        delete from customer_login
        where 1 > 2
        or customer_id in 
        <foreach collection="batchId" item="batchId" open="(" separator="," close=")">
            #{batchId}
        </foreach>
    </delete>


    <!--修改账号状态-->
    <update id="activate">
        update customer_login set user_stats = 1 where activate_code = #{code}
    </update>

    <update id="update">
        update customer_login
        set login_name = #{customerLoginEntity.loginName}
            <if test="customerLoginEntity.loginPassword != ''">
                , login_password = #{customerLoginEntity.loginPassword}
            </if>
        where login_account = #{customerLoginEntity.loginAccount}
    </update>

    <update id="updatePassWord">
        update customer_login
        set login_password = #{customerLoginEntity.loginPassword}
        where login_account = #{customerLoginEntity.loginAccount}
    </update>

    <update id="updateState">
        update customer_login set user_stats = #{state} where customer_id = #{id}
    </update>
</mapper>